{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Interconnect Project Documentation","text":"<p>Welcome to the documentation for Civic Interconnect (CI) projects.</p> <p>Use the navigation menu to explore available modules, APIs, and tools.</p> <p>For more information, visit the Civic Interconnect GitHub organization.</p>"},{"location":"api/","title":"Module <code>index</code>","text":""},{"location":"api/#classes","title":"Classes","text":""},{"location":"api/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#build_index_main-int","title":"<code>build_index_main() -&gt; int</code>","text":"<p>Build index.json summarizing exported GeoJSONs from data-out and data-out-chunked. Adds file size in MB (2 decimal places) to each index entry.</p>"},{"location":"api/#compute_bboxgeojson_path-pathlibpath-listfloat-none","title":"<code>compute_bbox(geojson_path: pathlib.Path) -&gt; list[float] | None</code>","text":"<p>Compute bounding box [minx, miny, maxx, maxy] for a GeoJSON file.</p> <p>Args:     geojson_path (Path): Path to the GeoJSON file.</p> <p>Returns:     list[float] | None: Bounding box, or None if read fails.</p>"},{"location":"api/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for the final committed GeoJSONs (chunked and ready for deployment).</p> <p>Returns:     Path: data-out directory.</p>"},{"location":"api/#get_repo_root-pathlibpath","title":"<code>get_repo_root() -&gt; pathlib.Path</code>","text":"<p>Return the root directory of the civic-data-boundaries-us-forests repository.</p> <p>This function first checks whether the file path is running from a cloned source repo (using file as a reference), and if that does not locate the repo, searches upward from the current working directory until it finds a folder containing a data-config directory.</p> <p>Returns:     Path: Path to the repository root.</p> <p>Raises:     RuntimeError: If the repo root cannot be found.</p>"},{"location":"api/#index_geojsons_in_folderbase_dir-pathlibpath-relative_prefix-str-listdict","title":"<code>index_geojsons_in_folder(base_dir: pathlib.Path, relative_prefix: str) -&gt; list[dict]</code>","text":"<p>Scan a folder recursively for GeoJSON files and return index entries.</p> <p>Args:     base_dir (Path): Folder to scan.     relative_prefix (str): e.g. \"data-out\" or \"data-out-chunked\"</p> <p>Returns:     list[dict]: Index entries for each GeoJSON found.</p>"},{"location":"api/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point for index generation.</p>"},{"location":"api/chunk/","title":"Module <code>chunk</code>","text":""},{"location":"api/chunk/#functions","title":"Functions","text":""},{"location":"api/chunk/#chunk_geojson_folderinput_folder-pathlibpath-max_features-int-output_folder-pathlibpath-none","title":"<code>chunk_geojson_folder(input_folder: pathlib.Path, max_features: int, output_folder: pathlib.Path) -&gt; None</code>","text":"<p>Chunk all eligible GeoJSON files in a folder.</p> <p>Args:     input_folder (Path): Folder containing GeoJSON files.     max_features (int): Maximum features per chunk.     output_folder (Path): Destination folder for chunked files.</p>"},{"location":"api/chunk/#chunk_layers-none","title":"<code>chunk_layers() -&gt; None</code>","text":"<p>Chunk all exported GeoJSONs from data-in-geojson, based on YAML configs.</p> <p>Writes all final chunked (or copied) GeoJSONs into data-out/.</p>"},{"location":"api/chunk/#chunk_or_copy_filegeojson_file-pathlibpath-max_features-int-output_dir-pathlibpath-none","title":"<code>chunk_or_copy_file(geojson_file: pathlib.Path, max_features: int, output_dir: pathlib.Path) -&gt; None</code>","text":"<p>Decide whether to chunk a GeoJSON file or simply copy it.</p> <p>Args:     geojson_file (Path): The file to process.     max_features (int): Threshold for chunking.     output_dir (Path): Destination folder.</p>"},{"location":"api/chunk/#export_forest_layerlayer-dict-none","title":"<code>export_forest_layer(layer: dict) -&gt; None</code>","text":"<p>Export GeoJSONs from a single forest or district layer.</p> <p>Reads shapefiles from data-in/ and writes either single or split GeoJSONs into data-out/.</p> <p>Args:     layer (dict): Configuration dictionary for the layer.</p>"},{"location":"api/chunk/#export_split_geojsonshp_path-pathlibpath-output_dir-pathlibpath-split_by-str-none-none-simplify_tolerance-float-001-none","title":"<code>export_split_geojson(shp_path: pathlib.Path, output_dir: pathlib.Path, split_by: str | None = None, simplify_tolerance: float = 0.01) -&gt; None</code>","text":"<p>Export a shapefile to one or more GeoJSON files.</p> <p>If split_by is provided, saves one file per unique attribute value.</p> <p>Args:     shp_path (Path): Path to the .shp file.     output_dir (Path): Output folder.     split_by (str, optional): Attribute to split on.     simplify_tolerance (float, optional): Simplification tolerance in degrees.</p>"},{"location":"api/chunk/#get_chunking_params-dict","title":"<code>get_chunking_params() -&gt; dict</code>","text":"<p>Load chunking and simplification parameters from YAML layer configs.</p> <p>Returns:     dict: Dictionary with chunking parameters.</p>"},{"location":"api/chunk/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for the final committed GeoJSONs (chunked and ready for deployment).</p> <p>Returns:     Path: data-out directory.</p>"},{"location":"api/chunk/#get_layer_in_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the input folder for a specific layer's shapefiles.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in/ where this layer's         downloaded and extracted shapefiles live.</p> <p>Returns:     Path: Full path to that layer's folder under data-in/.</p>"},{"location":"api/chunk/#get_layer_in_geojson_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_geojson_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the intermediate GeoJSON folder for a specific layer.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in-geojson/ where this layer's         exported (but not yet chunked) GeoJSONs are stored.</p> <p>Returns:     Path: Full path to that layer's folder under data-in-geojson/.</p>"},{"location":"api/chunk/#get_layer_out_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_out_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the output folder for a specific layer's final chunked GeoJSONs.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-out/ for this layer.</p> <p>Returns:     Path: Full path to that layer's folder under data-out/.</p>"},{"location":"api/chunk/#load_all_layer_configs-listdict","title":"<code>load_all_layer_configs() -&gt; list[dict]</code>","text":"<p>Load and merge all YAML layer configs into a single list.</p> <p>Returns:     list[dict]: List of all configured layers.</p>"},{"location":"api/chunk/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point for chunking all GeoJSON files as needed.</p>"},{"location":"api/cleanup/","title":"Module <code>cleanup</code>","text":""},{"location":"api/cleanup/#classes","title":"Classes","text":""},{"location":"api/cleanup/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/cleanup/#functions","title":"Functions","text":""},{"location":"api/cleanup/#clean_data_in_dirdata_in_dir-pathlibpath-none","title":"<code>clean_data_in_dir(data_in_dir: pathlib.Path) -&gt; None</code>","text":"<p>Delete all .zip files and extracted shapefiles from data-in/.</p> <p>Leaves the folder structure intact if empty folders remain.</p>"},{"location":"api/cleanup/#clean_data_in_geojson_dirdata_in_geojson_dir-pathlibpath-none","title":"<code>clean_data_in_geojson_dir(data_in_geojson_dir: pathlib.Path) -&gt; None</code>","text":"<p>Delete all files under data-in-geojson/.</p> <p>Removes intermediate GeoJSON exports but leaves data-out/ untouched.</p>"},{"location":"api/cleanup/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw downloads (zip files and extracted shapefiles).</p> <p>Returns:     Path: data-in directory.</p>"},{"location":"api/cleanup/#get_data_in_geojson_dir-pathlibpath","title":"<code>get_data_in_geojson_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in-geojson directory for intermediate exported GeoJSONs before chunking.</p> <p>Returns:     Path: data-in-geojson directory.</p>"},{"location":"api/cleanup/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point for cleanup of all intermediate files.</p>"},{"location":"api/cli.cli/","title":"Module <code>cli.cli</code>","text":""},{"location":"api/cli.cli/#functions","title":"Functions","text":""},{"location":"api/cli.cli/#chunk_command","title":"<code>chunk_command()</code>","text":"<p>Chunk all data from data-in-geojson/ to data-out/.</p>"},{"location":"api/cli.cli/#cleanup_command","title":"<code>cleanup_command()</code>","text":"<p>Cleanup temporary files and directories created during export.</p> <p>Deletes all .zip files and extracted shapefiles from data-in/, and all intermediate content in data-in-geojson/. Keeps chunked GeoJSONs safe in data-out/.</p>"},{"location":"api/cli.cli/#export_command","title":"<code>export_command()</code>","text":"<p>Export all data into data-in-geojson/.</p>"},{"location":"api/cli.cli/#fetch_command","title":"<code>fetch_command()</code>","text":"<p>Download required shapefiles into data-in/. Skips download if files already exist.</p>"},{"location":"api/cli.cli/#index_command","title":"<code>index_command()</code>","text":"<p>Generate index.json and other summary metadata files in data-out/.</p>"},{"location":"api/cli.cli/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/export/","title":"Module <code>export</code>","text":""},{"location":"api/export/#functions","title":"Functions","text":""},{"location":"api/export/#export_forest_layerlayer-dict-none","title":"<code>export_forest_layer(layer: dict) -&gt; None</code>","text":"<p>Export GeoJSONs from a single forest or district layer.</p> <p>Depending on the config: - may split by attribute (e.g. FORESTNAME) - may simplify geometries</p> <p>Outputs:     GeoJSON files into:         data-in-geojson/{layer.output_dir}/</p> <p>Args:     layer (dict): Layer configuration dictionary.</p>"},{"location":"api/export/#export_split_geojsonshp_path-pathlibpath-output_dir-pathlibpath-split_by-str-none-none-simplify_tolerance-float-001-none","title":"<code>export_split_geojson(shp_path: pathlib.Path, output_dir: pathlib.Path, split_by: str | None = None, simplify_tolerance: float = 0.01) -&gt; None</code>","text":"<p>Export a shapefile to one or more GeoJSON files.</p> <p>If split_by is provided, saves one file per unique attribute value.</p> <p>Args:     shp_path (Path): Path to the .shp file.     output_dir (Path): Output folder.     split_by (str, optional): Attribute to split on.     simplify_tolerance (float, optional): Simplification tolerance in degrees.</p>"},{"location":"api/export/#get_data_in_geojson_dir-pathlibpath","title":"<code>get_data_in_geojson_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in-geojson directory for intermediate exported GeoJSONs before chunking.</p> <p>Returns:     Path: data-in-geojson directory.</p>"},{"location":"api/export/#get_layer_in_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the input folder for a specific layer's shapefiles.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in/ where this layer's         downloaded and extracted shapefiles live.</p> <p>Returns:     Path: Full path to that layer's folder under data-in/.</p>"},{"location":"api/export/#get_layer_in_geojson_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_geojson_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the intermediate GeoJSON folder for a specific layer.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in-geojson/ where this layer's         exported (but not yet chunked) GeoJSONs are stored.</p> <p>Returns:     Path: Full path to that layer's folder under data-in-geojson/.</p>"},{"location":"api/export/#get_repo_root-pathlibpath","title":"<code>get_repo_root() -&gt; pathlib.Path</code>","text":"<p>Return the root directory of the civic-data-boundaries-us-forests repository.</p> <p>This function first checks whether the file path is running from a cloned source repo (using file as a reference), and if that does not locate the repo, searches upward from the current working directory until it finds a folder containing a data-config directory.</p> <p>Returns:     Path: Path to the repository root.</p> <p>Raises:     RuntimeError: If the repo root cannot be found.</p>"},{"location":"api/export/#load_all_layer_configs-listdict","title":"<code>load_all_layer_configs() -&gt; list[dict]</code>","text":"<p>Loads and merges all YAML layer configs into a list of layers.</p> <p>Returns:     list[dict]: List of layer configuration dictionaries.</p>"},{"location":"api/export/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>CLI entry point to export forest-related layers to GeoJSON.</p> <p>Returns:     int: Exit code (0 if successful, 1 if failed).</p>"},{"location":"api/export/#should_skip_filepath-pathlibpath-bool","title":"<code>should_skip_file(path: pathlib.Path) -&gt; bool</code>","text":"<p>Determine whether this path should be skipped.</p> <p>Skips directories and files with unexpected extensions.</p>"},{"location":"api/fetch/","title":"Module <code>fetch</code>","text":""},{"location":"api/fetch/#classes","title":"Classes","text":""},{"location":"api/fetch/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/fetch/#functions","title":"Functions","text":""},{"location":"api/fetch/#download_fileurl-str-dest_path-pathlibpath-bool","title":"<code>download_file(url: str, dest_path: pathlib.Path) -&gt; bool</code>","text":"<p>No description available.</p>"},{"location":"api/fetch/#extract_zipzip_path-pathlibpath-extract_to-pathlibpath-bool","title":"<code>extract_zip(zip_path: pathlib.Path, extract_to: pathlib.Path) -&gt; bool</code>","text":"<p>No description available.</p>"},{"location":"api/fetch/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw downloads (zip files and extracted shapefiles).</p> <p>Returns:     Path: data-in directory.</p>"},{"location":"api/fetch/#get_repo_root-pathlibpath","title":"<code>get_repo_root() -&gt; pathlib.Path</code>","text":"<p>Return the root directory of the civic-data-boundaries-us-forests repository.</p> <p>This function first checks whether the file path is running from a cloned source repo (using file as a reference), and if that does not locate the repo, searches upward from the current working directory until it finds a folder containing a data-config directory.</p> <p>Returns:     Path: Path to the repository root.</p> <p>Raises:     RuntimeError: If the repo root cannot be found.</p>"},{"location":"api/fetch/#main-int","title":"<code>main() -&gt; int</code>","text":"<p>No description available.</p>"},{"location":"api/fetch/#process_layerlayer-dict-bool","title":"<code>process_layer(layer: dict) -&gt; bool</code>","text":"<p>No description available.</p>"},{"location":"api/utils.chunk_utils/","title":"Module <code>utils.chunk_utils</code>","text":""},{"location":"api/utils.chunk_utils/#classes","title":"Classes","text":""},{"location":"api/utils.chunk_utils/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/utils.chunk_utils/#functions","title":"Functions","text":""},{"location":"api/utils.chunk_utils/#chunk_geojson_filegeojson_file-pathlibpath-output_dir-pathlibpath-max_features-int-none","title":"<code>chunk_geojson_file(geojson_file: pathlib.Path, output_dir: pathlib.Path, max_features: int) -&gt; None</code>","text":"<p>Chunk a single GeoJSON file into smaller pieces in the output_dir.</p> <p>Skips the file if it's a directory or already chunked.</p>"},{"location":"api/utils.chunk_utils/#chunk_geojson_folderinput_folder-pathlibpath-max_features-int-output_folder-pathlibpath-none","title":"<code>chunk_geojson_folder(input_folder: pathlib.Path, max_features: int, output_folder: pathlib.Path) -&gt; None</code>","text":"<p>Chunk all eligible GeoJSON files in a folder.</p> <p>Args:     input_folder (Path): Folder containing GeoJSON files.     max_features (int): Maximum features per chunk.     output_folder (Path): Destination folder for chunked files.</p>"},{"location":"api/utils.chunk_utils/#chunk_onepath-pathlibpath-max_features-int-output_dir-pathlibpath","title":"<code>chunk_one(path: pathlib.Path, max_features: int, output_dir: pathlib.Path)</code>","text":"<p>Chunk a single GeoJSON file and write the output files.</p> <p>Args:     path (Path): Path to input GeoJSON file.     max_features (int): Max features per chunk.     output_dir (Path): Output folder to store chunks.</p>"},{"location":"api/utils.chunk_utils/#chunk_or_copy_filegeojson_file-pathlibpath-max_features-int-output_dir-pathlibpath-none","title":"<code>chunk_or_copy_file(geojson_file: pathlib.Path, max_features: int, output_dir: pathlib.Path) -&gt; None</code>","text":"<p>Decide whether to chunk a GeoJSON file or simply copy it.</p> <p>Args:     geojson_file (Path): The file to process.     max_features (int): Threshold for chunking.     output_dir (Path): Destination folder.</p>"},{"location":"api/utils.chunk_utils/#copy_geojson_filesrc-pathlibpath-dest-pathlibpath-none","title":"<code>copy_geojson_file(src: pathlib.Path, dest: pathlib.Path) -&gt; None</code>","text":"<p>Copy a GeoJSON file from src to dest.</p>"},{"location":"api/utils.chunk_utils/#geojson_feature_countpath-pathlibpath-int","title":"<code>geojson_feature_count(path: pathlib.Path) -&gt; int</code>","text":"<p>Return the number of features in a GeoJSON file.</p> <p>Args:     path (Path): Path to the GeoJSON file.</p> <p>Returns:     int: Feature count or 0 if reading fails.</p>"},{"location":"api/utils.chunk_utils/#get_chunking_params-dict","title":"<code>get_chunking_params() -&gt; dict</code>","text":"<p>Load chunking and simplification parameters from YAML layer configs.</p> <p>Returns:     dict: Dictionary with chunking parameters.</p>"},{"location":"api/utils.chunk_utils/#get_repo_root-pathlibpath","title":"<code>get_repo_root() -&gt; pathlib.Path</code>","text":"<p>Return the root directory of the civic-data-boundaries-us-forests repository.</p> <p>This function first checks whether the file path is running from a cloned source repo (using file as a reference), and if that does not locate the repo, searches upward from the current working directory until it finds a folder containing a data-config directory.</p> <p>Returns:     Path: Path to the repository root.</p> <p>Raises:     RuntimeError: If the repo root cannot be found.</p>"},{"location":"api/utils.chunk_utils/#is_chunked_filepath-pathlibpath-bool","title":"<code>is_chunked_file(path: pathlib.Path) -&gt; bool</code>","text":"<p>Return True if the file is already a chunked GeoJSON.</p> <p>Args:     path (Path): Path to the file.</p> <p>Returns:     bool: True if the file ends with '_chunked.geojson'.</p>"},{"location":"api/utils.chunk_utils/#load_all_layer_configs-listdict","title":"<code>load_all_layer_configs() -&gt; list[dict]</code>","text":"<p>Load and merge all YAML layer configs into a single list.</p> <p>Returns:     list[dict]: List of all configured layers.</p>"},{"location":"api/utils.chunk_utils/#should_skip_filepath-pathlibpath-bool","title":"<code>should_skip_file(path: pathlib.Path) -&gt; bool</code>","text":"<p>Determine whether a file should be skipped during chunking.</p> <p>Args:     path (Path): Path to the file or directory.</p> <p>Returns:     bool: True if the path is a directory or already chunked.</p>"},{"location":"api/utils.export_utils/","title":"Module <code>utils.export_utils</code>","text":""},{"location":"api/utils.export_utils/#classes","title":"Classes","text":""},{"location":"api/utils.export_utils/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/utils.export_utils/#functions","title":"Functions","text":""},{"location":"api/utils.export_utils/#export_split_geojsonshp_path-pathlibpath-output_dir-pathlibpath-split_by-str-none-none-simplify_tolerance-float-001-none","title":"<code>export_split_geojson(shp_path: pathlib.Path, output_dir: pathlib.Path, split_by: str | None = None, simplify_tolerance: float = 0.01) -&gt; None</code>","text":"<p>Export a shapefile to one or more GeoJSON files.</p> <p>If split_by is provided, saves one file per unique attribute value.</p> <p>Args:     shp_path (Path): Path to the .shp file.     output_dir (Path): Output folder.     split_by (str, optional): Attribute to split on.     simplify_tolerance (float, optional): Simplification tolerance in degrees.</p>"},{"location":"api/utils.export_utils/#load_layersource-pathlibpath-required_cols-liststr-geopandasgeodataframegeodataframe","title":"<code>load_layer(source: pathlib.Path, required_cols: list[str]) -&gt; geopandas.geodataframe.GeoDataFrame</code>","text":"<p>Load a shapefile layer and validate required columns.</p> <p>Args:     source (Path): Path to .shp file.     required_cols (list[str]): Required column names.</p> <p>Returns:     gpd.GeoDataFrame: Loaded GeoDataFrame.</p>"},{"location":"api/utils.export_utils/#remove_crs_fieldgeojson_path-pathlibpath-none","title":"<code>remove_crs_field(geojson_path: pathlib.Path) -&gt; None</code>","text":"<p>Remove the 'crs' property from a GeoJSON file, if present.</p> <p>Args:     geojson_path (Path): Path to the GeoJSON file.</p>"},{"location":"api/utils.export_utils/#should_skip_filepath-pathlibpath-bool","title":"<code>should_skip_file(path: pathlib.Path) -&gt; bool</code>","text":"<p>Determine whether this path should be skipped.</p> <p>Skips directories and files with unexpected extensions.</p>"},{"location":"api/utils.export_utils/#validate_columnsgdf-geopandasgeodataframegeodataframe-columns-liststr-label-str-none","title":"<code>validate_columns(gdf: geopandas.geodataframe.GeoDataFrame, columns: list[str], label: str) -&gt; None</code>","text":"<p>Check if required columns exist in a GeoDataFrame.</p> <p>Args:     gdf (gpd.GeoDataFrame): GeoDataFrame to check.     columns (list[str]): Required column names.     label (str): Name to show in error messages.</p>"},{"location":"api/utils.get_paths/","title":"Module <code>utils.get_paths</code>","text":""},{"location":"api/utils.get_paths/#classes","title":"Classes","text":""},{"location":"api/utils.get_paths/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/utils.get_paths/#functions","title":"Functions","text":""},{"location":"api/utils.get_paths/#get_data_in_dir-pathlibpath","title":"<code>get_data_in_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in directory for raw downloads (zip files and extracted shapefiles).</p> <p>Returns:     Path: data-in directory.</p>"},{"location":"api/utils.get_paths/#get_data_in_geojson_dir-pathlibpath","title":"<code>get_data_in_geojson_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-in-geojson directory for intermediate exported GeoJSONs before chunking.</p> <p>Returns:     Path: data-in-geojson directory.</p>"},{"location":"api/utils.get_paths/#get_data_out_dir-pathlibpath","title":"<code>get_data_out_dir() -&gt; pathlib.Path</code>","text":"<p>Return the root data-out directory for the final committed GeoJSONs (chunked and ready for deployment).</p> <p>Returns:     Path: data-out directory.</p>"},{"location":"api/utils.get_paths/#get_layer_in_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the input folder for a specific layer's shapefiles.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in/ where this layer's         downloaded and extracted shapefiles live.</p> <p>Returns:     Path: Full path to that layer's folder under data-in/.</p>"},{"location":"api/utils.get_paths/#get_layer_in_geojson_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_in_geojson_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the intermediate GeoJSON folder for a specific layer.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-in-geojson/ where this layer's         exported (but not yet chunked) GeoJSONs are stored.</p> <p>Returns:     Path: Full path to that layer's folder under data-in-geojson/.</p>"},{"location":"api/utils.get_paths/#get_layer_out_dirlayer_output_dir-str-pathlibpath","title":"<code>get_layer_out_dir(layer_output_dir: str) -&gt; pathlib.Path</code>","text":"<p>Return the output folder for a specific layer's final chunked GeoJSONs.</p> <p>Args:     layer_output_dir (str): Subdirectory under data-out/ for this layer.</p> <p>Returns:     Path: Full path to that layer's folder under data-out/.</p>"},{"location":"api/utils.get_paths/#get_repo_root-pathlibpath","title":"<code>get_repo_root() -&gt; pathlib.Path</code>","text":"<p>Return the root directory of the civic-data-boundaries-us-forests repository.</p> <p>This function first checks whether the file path is running from a cloned source repo (using file as a reference), and if that does not locate the repo, searches upward from the current working directory until it finds a folder containing a data-config directory.</p> <p>Returns:     Path: Path to the repository root.</p> <p>Raises:     RuntimeError: If the repo root cannot be found.</p>"}]}
